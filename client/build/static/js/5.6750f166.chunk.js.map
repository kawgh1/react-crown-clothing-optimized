{"version":3,"sources":["redux/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.styles.jsx","components/collection-item/collection-item.component.jsx","pages/collection/collection.styles.jsx","pages/collection/collection.component.jsx","pages/collection/collection.container.jsx"],"names":["selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded","WithSpinner","WrappedComponent","isLoading","otherProps","CollectionItemContainer","styled","div","AddButton","CustomButton","BackgroundImage","imageUrl","CollectionFooterContainer","NameContainer","span","PriceContainer","connect","dispatch","addItem","item","name","price","className","style","color","width","marginBottom","marginLeft","marginTop","onClick","inverted","CollectionPageContainer","CollectionTitle","h2","CollectionItemsContainer","ownProps","collection","match","params","collectionId","title","items","id","mapStateToProps","createStructuredSelector","compose","CollectionPage"],"mappings":"sHAAA,oJA2BMA,EAAa,SAACC,GAAD,OAAWA,EAAMC,MAEvBC,EAAoBC,YAC7B,CAACJ,IACD,SAACE,GAAD,OAAUA,EAAKG,eAGNC,EAA8BF,YACvC,CAACD,IACD,SAACE,GAAD,OACIA,EACME,OAAOC,KAAKH,GAAaI,KAAI,SAACC,GAAD,OAASL,EAAYK,MAClD,MAGDC,EAAmB,SAACC,GAAD,OAC5BR,YAAe,CAACD,IAAoB,SAACE,GAAD,OAChCA,EAAcA,EAAYO,GAAsB,SAG3CC,EAA6BT,YACtC,CAACJ,IACD,SAACE,GAAD,OAAUA,EAAKY,cAGNC,EAA4BX,YACrC,CAACJ,IACD,SAACE,GAAD,QAAYA,EAAKG,gB,4FCpBNW,IALX,SAACC,GAAD,OACA,YAAmC,IAAhCC,EAA+B,EAA/BA,UAAcC,EAAiB,iBAC9B,OAAOD,EAAY,cAAC,IAAD,IAAc,cAACD,EAAD,eAAsBE,O,8EC5BlDC,EAA0BC,IAAOC,IAAV,wsBAkCvBC,EAAYF,YAAOG,IAAPH,CAAH,8HAQTI,EAAkBJ,IAAOC,IAAV,0TAUJ,gBAAGI,EAAH,EAAGA,SAAH,oBAAyBA,EAAzB,QAGXC,EAA4BN,IAAOC,IAAV,6IAQzBM,EAAgBP,IAAOQ,KAAV,uEAKbC,EAAiBT,IAAOQ,KAAV,qE,wBCGZE,gBAAQ,MALI,SAACC,GAAD,MAAe,CACtCC,QAAS,SAACC,GAAD,OAAUF,EAASC,YAAQC,QAIzBH,EAnCQ,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QACpBE,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOV,EAAaQ,EAAbR,SAErB,OACI,eAACN,EAAD,WACI,cAACK,EAAD,CAAiBY,UAAU,QAAQX,SAAUA,IAE7C,oBAAIY,MAAO,CAAEC,MAAO,QAASC,MAAO,MAAOC,aAAc,SAEzD,eAACd,EAAD,WACI,cAACC,EAAD,UAAgBO,IAChB,eAACL,EAAD,eAAkBM,QAGtB,oBACIE,MAAO,CACHC,MAAO,QACPG,WAAY,MACZF,MAAO,MACPG,UAAW,UAInB,cAACpB,EAAD,CAAWqB,QAAS,kBAAMX,EAAQC,IAAOW,UAAQ,EAAjD,gC,4HC5DCC,EAA0BzB,IAAOC,IAAV,8KASvByB,EAAkB1B,IAAO2B,GAAV,4EAKfC,EAA2B5B,IAAOC,IAAV,yL,QCgCtBS,eAJS,SAAC9B,EAAOiD,GAAR,MAAsB,CAC1CC,WAAYxC,YAAiBuC,EAASE,MAAMC,OAAOC,aAAvC3C,CAAqDV,MAGtD8B,EArBQ,SAAC,GAAoB,IAAlBoB,EAAiB,EAAjBA,WACdI,EAAiBJ,EAAjBI,MAAOC,EAAUL,EAAVK,MAEf,OACI,eAACV,EAAD,WACI,cAACC,EAAD,UAAkBQ,IAClB,oBAAIjB,MAAO,CAAEC,MAAO,MAAOC,MAAO,SAClC,cAACS,EAAD,UACKO,EAAM/C,KAAI,SAACyB,GAAD,OACP,cAAC,IAAD,CAA8BA,KAAMA,GAAfA,EAAKuB,eC5BxCC,EAAkBC,YAAyB,CAC7CzC,UAAW,SAACjB,GAAD,OAAYc,YAA0Bd,MAG/C6C,EAA0Bc,YAC5B7B,YAAQ2B,GACR1C,IAF4B4C,CAG9BC,GAEaf","file":"static/js/5.6750f166.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\r\n\r\n/* \r\nOne quick addition, our selectCollection function we just wrote is not memoized \r\ndue to collectionUrlParam being passed in from our collection component's mapStateToProps \r\nrunning whenever our state changes and and calling a new instance of our selectCollection function. \r\n\r\nIn this case collectionUrlParam is a dynamic argument meaning it can change, \r\nso to memoize selectCollection we actually have to memoize the whole function using \r\na memoize helper function. We can leverage the lodash library, specifically \r\ntheir memoize helper function by adding it our packages\r\n*/\r\n\r\n/* \r\nIf there is no collection, it's better that we return null or an empty array [] so that the components \r\nthat use this selector will get a null object and naturally know, ok there's no data here, \r\nso I do X, render an empty state if I need to\r\n\r\nWhen our app first boots up and this Collection page mounts its going to look inside the reducer \r\nand try to find a collections map\r\n\r\nhowever because we have not received the data back yet from our backend, \r\nbecause that data request is asynchronous,\r\nour app can possibly be in a state where our data does not exist\r\nso we have to create what's called a LOADING STATE and in this loading state we want to render a spinner\r\n*/\r\n\r\nconst selectShop = (state) => state.shop;\r\n\r\nexport const selectCollections = createSelector(\r\n    [selectShop],\r\n    (shop) => shop.collections\r\n);\r\n\r\nexport const selectCollectionsForPreview = createSelector(\r\n    [selectCollections],\r\n    (collections) =>\r\n        collections\r\n            ? Object.keys(collections).map((key) => collections[key])\r\n            : []\r\n);\r\n\r\nexport const selectCollection = (collectionUrlParam) =>\r\n    createSelector([selectCollections], (collections) =>\r\n        collections ? collections[collectionUrlParam] : null\r\n    );\r\n\r\nexport const selectIsCollectionFetching = createSelector(\r\n    [selectShop],\r\n    (shop) => shop.isFetching\r\n);\r\n\r\nexport const selectIsCollectionsLoaded = createSelector(\r\n    [selectShop],\r\n    (shop) => !!shop.collections\r\n);\r\n","import React from \"react\";\r\n/* \r\nWithSpinner is a Higher Order Component (HOC)\r\n\r\nWith any Higher Order Component (HOC) it returns you back a new functional component\r\n\r\nSo our HOC takes in an existing component with a boolean property isLoading, \r\nand depending on the value, returns either\r\na Spinner Component or the Wrapped Component with ...otherProps\r\n*/\r\n\r\n// import { SpinnerContainer, SpinnerOverlay } from \"./with-spinner.styles\";\r\n\r\nimport Spinner from \"../spinner/spinner.component\";\r\n\r\n// const WithSpinner = (WrappedComponent) => {\r\n//     const Spinner = ({ isLoading, ...otherProps }) => {\r\n//         return isLoading ? (\r\n//             <SpinnerOverlay>\r\n//                 <SpinnerContainer />\r\n//             </SpinnerOverlay>\r\n//         ) : (\r\n//             <WrappedComponent {...otherProps} />\r\n//         );\r\n//     };\r\n//     return Spinner;\r\n// };\r\n\r\nconst WithSpinner =\r\n    (WrappedComponent) =>\r\n    ({ isLoading, ...otherProps }) => {\r\n        return isLoading ? <Spinner /> : <WrappedComponent {...otherProps} />;\r\n    };\r\n\r\nexport default WithSpinner;\r\n","import styled from \"styled-components\";\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\n\r\nexport const CollectionItemContainer = styled.div`\r\n    width: 16rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 20rem;\r\n    align-items: center;\r\n    margin: 10px 5px;\r\n    border-radius: 2px;\r\n    position: relative;\r\n\r\n    .image {\r\n        width: 100%;\r\n        height: 95%;\r\n        background-size: cover;\r\n        background-position: center;\r\n        margin: 5px;\r\n        filter: brightness(115%);\r\n        border-radius: 3px;\r\n        box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 17px 0px;\r\n        border: 1px solid white;\r\n    }\r\n\r\n    &:hover,\r\n    &:active {\r\n        .image {\r\n            opacity: 0.9;\r\n        }\r\n        button {\r\n            opacity: 0.85;\r\n            display: flex;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const AddButton = styled(CustomButton)`\r\n    width: 40%;\r\n    opacity: 0.7;\r\n    position: absolute;\r\n    top: 205px;\r\n    display: none;\r\n`;\r\n\r\nexport const BackgroundImage = styled.div`\r\n    width: 100%;\r\n    height: 95%;\r\n    background-size: cover;\r\n    background-position: center;\r\n    margin: 5px;\r\n    filter: brightness(115%);\r\n    border-radius: 3px;\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 17px 0px;\r\n    border: 1px solid white;\r\n    background-image: ${({ imageUrl }) => `url(${imageUrl})`};\r\n`;\r\n\r\nexport const CollectionFooterContainer = styled.div`\r\n    width: 82%;\r\n    height: 5%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-size: 18px;\r\n`;\r\n\r\nexport const NameContainer = styled.span`\r\n    width: 90%;\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nexport const PriceContainer = styled.span`\r\n    width: 10%;\r\n    text-align: right;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport {\r\n    CollectionItemContainer,\r\n    CollectionFooterContainer,\r\n    AddButton,\r\n    BackgroundImage,\r\n    NameContainer,\r\n    PriceContainer,\r\n} from \"./collection-item.styles\";\r\n\r\n// REDUX\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../../redux/cart/cart.actions\";\r\n\r\n// REACT\r\n\r\n// const CollectionItem = (props) =>  (\r\n\r\n//     <div className='collection-item'>\r\n//         <div className='image'\r\n//                 style={{backgroundImage: `url(${props.imageUrl})`}} />\r\n\r\n//         <hr style={{ color: \"white\", width: \"95%\" }} />\r\n\r\n//         <div className='collection-footer'>\r\n//             <span className='name'>{props.name}\r\n\r\n//              <hr style={{ color: \"white\", marginLeft: \"0px\", width: \"95%\" }}/>\r\n\r\n//             </span>\r\n//             <span className='price'>${props.price}</span>\r\n//         </div>\r\n//         <CustomButton onClick={() => addItem(props.item)} inverted>Add to cart</CustomButton>\r\n//     </div>\r\n// );\r\n\r\n// REDUX\r\n\r\nconst CollectionItem = ({ item, addItem }) => {\r\n    const { name, price, imageUrl } = item;\r\n\r\n    return (\r\n        <CollectionItemContainer>\r\n            <BackgroundImage className=\"image\" imageUrl={imageUrl} />\r\n\r\n            <hr style={{ color: \"white\", width: \"95%\", marginBottom: \"2px\" }} />\r\n\r\n            <CollectionFooterContainer>\r\n                <NameContainer>{name}</NameContainer>\r\n                <PriceContainer>${price}</PriceContainer>\r\n            </CollectionFooterContainer>\r\n\r\n            <hr\r\n                style={{\r\n                    color: \"white\",\r\n                    marginLeft: \"5px\",\r\n                    width: \"75%\",\r\n                    marginTop: \"10px\",\r\n                }}\r\n            />\r\n\r\n            <AddButton onClick={() => addItem(item)} inverted>\r\n                Add to cart\r\n            </AddButton>\r\n        </CollectionItemContainer>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addItem: (item) => dispatch(addItem(item)),\r\n});\r\n\r\n// export default CollectionItem;\r\nexport default connect(null, mapDispatchToProps)(CollectionItem);\r\n","import styled from \"styled-components\";\r\n\r\nexport const CollectionPageContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 1rem 0.25rem;\r\n    max-width: 1200px;\r\n    margin: auto;\r\n`;\r\n\r\nexport const CollectionTitle = styled.h2`\r\n    font-size: 38px;\r\n    margin: 0 auto 10px;\r\n`;\r\n\r\nexport const CollectionItemsContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    max-width: 1200px;\r\n    justify-content: space-evenly;\r\n    & > div {\r\n        margin: 10px 30px 30px;\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport CollectionItem from \"../../components/collection-item/collection-item.component\";\r\n\r\nimport { selectCollection } from \"../../redux/shop/shop.selectors\";\r\n\r\nimport {\r\n    CollectionPageContainer,\r\n    CollectionTitle,\r\n    CollectionItemsContainer,\r\n} from \"./collection.styles\";\r\n\r\n/* \r\nIf there is no collection, it's better that we return null so that the components \r\nthat use this selector will get a null object and naturally know, ok there's no data here, \r\nso I do X, render an empty state if I need to\r\n\r\nWhen our app first boots up and this Collection page mounts its going to look inside the reducer \r\nand try to find a collections map\r\n\r\nhowever because we have not received the data back yet from our backend, \r\nbecause that data request is asynchronous,\r\nour app can possibly be in a state where our data does not exist\r\nso we have to create what's called a LOADING STATE and in this loading state we want to render a spinner\r\n*/\r\n\r\nconst CollectionPage = ({ collection }) => {\r\n    const { title, items } = collection;\r\n\r\n    return (\r\n        <CollectionPageContainer>\r\n            <CollectionTitle>{title}</CollectionTitle>\r\n            <hr style={{ color: \"red\", width: \"90%\" }} />\r\n            <CollectionItemsContainer>\r\n                {items.map((item) => (\r\n                    <CollectionItem key={item.id} item={item} />\r\n                ))}\r\n            </CollectionItemsContainer>\r\n        </CollectionPageContainer>\r\n    );\r\n};\r\n\r\n// we use ownProps here because unlike other selectors, this selector needs a part of the state depending on the URL parameter\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    collection: selectCollection(ownProps.match.params.collectionId)(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(CollectionPage);\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\nimport CollectionPage from \"./collection.component\";\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isLoading: (state) => !selectIsCollectionsLoaded(state),\r\n});\r\n\r\nconst CollectionPageContainer = compose(\r\n    connect(mapStateToProps),\r\n    WithSpinner\r\n)(CollectionPage);\r\n\r\nexport default CollectionPageContainer;\r\n"],"sourceRoot":""}